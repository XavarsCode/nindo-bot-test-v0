// utils/idGenerator.js - Générateur d'IDs uniques
function generateId() {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 7; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

module.exports = { generateId };

// ===================================

// utils/logger.js - Système de logs
const fs = require('fs');
const path = require('path');

class Logger {
    constructor() {
        this.logsDir = path.join(__dirname, '..', 'logs');
        this.ensureLogsDir();
    }

    ensureLogsDir() {
        if (!fs.existsSync(this.logsDir)) {
            fs.mkdirSync(this.logsDir, { recursive: true });
        }
    }

    formatMessage(level, message, data = null) {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${level}] ${message}`;
        
        if (data) {
            return `${logMessage} ${JSON.stringify(data)}`;
        }
        return logMessage;
    }

    writeToFile(level, message) {
        const filename = `${new Date().toISOString().split('T')[0]}.log`;
        const filepath = path.join(this.logsDir, filename);
        
        fs.appendFileSync(filepath, message + '\n');
    }

    info(message, data = null) {
        const formatted = this.formatMessage('INFO', message, data);
        console.log(`\x1b[36m${formatted}\x1b[0m`); // Cyan
        this.writeToFile('INFO', formatted);
    }

    warn(message, data = null) {
        const formatted = this.formatMessage('WARN', message, data);
        console.warn(`\x1b[33m${formatted}\x1b[0m`); // Yellow
        this.writeToFile('WARN', formatted);
    }

    error(message, data = null) {
        const formatted = this.formatMessage('ERROR', message, data);
        console.error(`\x1b[31m${formatted}\x1b[0m`); // Red
        this.writeToFile('ERROR', formatted);
    }

    success(message, data = null) {
        const formatted = this.formatMessage('SUCCESS', message, data);
        console.log(`\x1b[32m${formatted}\x1b[0m`); // Green
        this.writeToFile('SUCCESS', formatted);
    }
}

module.exports = new Logger();